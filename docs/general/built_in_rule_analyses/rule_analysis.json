[
  {
    "name": "create_dependency_rule",
    "signature": "(property_name: str, dependencies: Dict[Any, Set[Any]]) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule enforcing dependencies between property values.",
    "complexity_analysis": {},
    "benchmarks": [],
    "test_coverage": 0.0,
    "properties_accessed": {},
    "optimization_suggestions": [],
    "example_usage": "",
    "error": "Failed to analyze rule: Undefined variable in rule: e\nTraceback (most recent call last):\n  File \"/home/runner/work/seqrule/seqrule/src/seqrule/analysis/analyzer.py\", line 499, in analyze\n    raise AnalysisError(f\"Undefined variable in rule: {undefined_var}\")\nseqrule.analysis.base.AnalysisError: Undefined variable in rule: e\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/seqrule/seqrule/scripts/analyze_rules.py\", line 482, in analyze_rule_generator\n    analysis = analyzer.analyze(example_rule)\n  File \"/home/runner/work/seqrule/seqrule/src/seqrule/analysis/analyzer.py\", line 608, in analyze\n    raise AnalysisError(f\"Failed to analyze rule: {str(e)}\") from e\nseqrule.analysis.base.AnalysisError: Failed to analyze rule: Undefined variable in rule: e\n",
    "scores": {
      "raw_score": 24.25,
      "normalized_score": 40.416666666666664,
      "complexity_level": "ComplexityScore.MODERATE",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 0.0,
        "cyclomatic_complexity": 40.0,
        "property_access_complexity": 0.0,
        "ast_node_count": 80.0,
        "bottleneck_count": 0.0
      },
      "recommendations": [
        "Simplify the rule by breaking it into smaller, more focused rules."
      ]
    },
    "size_time_correlation": null
  },
  {
    "name": "create_historical_rule",
    "signature": "(window: int, condition: Callable[[List[seqrule.core.AbstractObject]], bool]) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule checking a condition over a sliding window.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(1)",
      "description": "contains 1 loops.",
      "bottlenecks": [],
      "ast_features": {
        "total_loops": 1,
        "nested_loops": 0,
        "max_loop_depth": 1,
        "comprehensions": 0,
        "generator_expressions": 0,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": false,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "{0}",
        "loop_ranges": [
          [
            {
              "left": {
                "left": {
                  "func": {
                    "id": "len",
                    "ctx": {},
                    "lineno": 5,
                    "col_offset": 19,
                    "end_lineno": 5,
                    "end_col_offset": 22
                  },
                  "args": [
                    {
                      "id": "seq",
                      "ctx": {},
                      "lineno": 5,
                      "col_offset": 23,
                      "end_lineno": 5,
                      "end_col_offset": 26
                    }
                  ],
                  "keywords": [],
                  "lineno": 5,
                  "col_offset": 19,
                  "end_lineno": 5,
                  "end_col_offset": 27
                },
                "op": {},
                "right": {
                  "id": "window",
                  "ctx": {},
                  "lineno": 5,
                  "col_offset": 30,
                  "end_lineno": 5,
                  "end_col_offset": 36
                },
                "lineno": 5,
                "col_offset": 19,
                "end_lineno": 5,
                "end_col_offset": 36
              },
              "op": {},
              "right": {
                "value": 1,
                "kind": null,
                "lineno": 5,
                "col_offset": 39,
                "end_lineno": 5,
                "end_col_offset": 40
              },
              "lineno": 5,
              "col_offset": 19,
              "end_lineno": 5,
              "end_col_offset": 40
            }
          ]
        ],
        "result_lists": []
      },
      "total_property_accesses": 0
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.5438999992056778e-05,
        "std_dev": 8.736321906349391e-06,
        "peak_memory": 0.0022735595703125,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 1.791139999340885e-05,
        "std_dev": 6.645682910027688e-06,
        "peak_memory": 0.002162933349609375,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 2.7545199986889202e-05,
        "std_dev": 1.5799257048459953e-06,
        "peak_memory": 0.000522613525390625,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 0.00014775579999195542,
        "std_dev": 6.894332845268636e-05,
        "peak_memory": 0.0009918212890625,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 0.0008152827999765577,
        "std_dev": 7.163253771745172e-05,
        "peak_memory": 0.00122833251953125,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {},
    "optimization_suggestions": [],
    "example_usage": "From docstring:\n    def no_repeats(window): return len(set(obj[\"value\"] for obj in window)) == len(window)\n    unique_values = create_historical_rule(3, no_repeats)",
    "error": null,
    "scores": {
      "raw_score": 9.0,
      "normalized_score": 15.0,
      "complexity_level": "ComplexityScore.TRIVIAL",
      "contributing_factors": {
        "time_complexity": 0.0,
        "space_complexity": 0.0,
        "cyclomatic_complexity": 20.0,
        "property_access_complexity": 0.0,
        "ast_node_count": 40.0,
        "bottleneck_count": 0.0
      },
      "recommendations": [
        "The rule is already well-optimized. No specific recommendations."
      ]
    },
    "size_time_correlation": 0.9999618413606614
  },
  {
    "name": "create_bounded_sequence_rule",
    "signature": "(min_length: int, max_length: int, inner_rule: seqrule.dsl.DSLRule) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule that combines length constraints with another rule.",
    "complexity_analysis": {
      "time_complexity": "O(1)",
      "space_complexity": "O(1)",
      "description": ".",
      "bottlenecks": [],
      "ast_features": {
        "total_loops": 0,
        "nested_loops": 0,
        "max_loop_depth": 0,
        "comprehensions": 0,
        "generator_expressions": 0,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": false,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "set()",
        "loop_ranges": [],
        "result_lists": []
      },
      "total_property_accesses": 0
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.534240001319631e-05,
        "std_dev": 3.4029949635073663e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 3.137059998152836e-05,
        "std_dev": 6.619071447306489e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 3.707520000943987e-05,
        "std_dev": 1.2201749718897636e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 2.4283199991259607e-05,
        "std_dev": 8.14055470261049e-06,
        "peak_memory": 0.00031280517578125,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 2.215179999893735e-05,
        "std_dev": 6.83631039303789e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {},
    "optimization_suggestions": [],
    "example_usage": "From docstring:\n    valid_sequence = create_bounded_sequence_rule(2, 5, pattern_rule)",
    "error": null,
    "scores": {
      "raw_score": 30.63,
      "normalized_score": 51.05,
      "complexity_level": "ComplexityScore.MODERATE",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 0.0,
        "cyclomatic_complexity": 60.0,
        "property_access_complexity": 9.2,
        "ast_node_count": 80.0,
        "bottleneck_count": 0.0
      },
      "recommendations": [
        "Simplify the rule by breaking it into smaller, more focused rules."
      ]
    },
    "size_time_correlation": -0.4337039873455961
  },
  {
    "name": "create_alternation_rule",
    "signature": "(property_name: str) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule requiring alternating property values.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(1)",
      "description": "contains 1 loops.",
      "bottlenecks": [],
      "ast_features": {
        "total_loops": 1,
        "nested_loops": 0,
        "max_loop_depth": 1,
        "comprehensions": 0,
        "generator_expressions": 0,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": false,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "{0}",
        "loop_ranges": [
          [
            {
              "left": {
                "func": {
                  "id": "len",
                  "ctx": {},
                  "lineno": 5,
                  "col_offset": 19,
                  "end_lineno": 5,
                  "end_col_offset": 22
                },
                "args": [
                  {
                    "id": "seq",
                    "ctx": {},
                    "lineno": 5,
                    "col_offset": 23,
                    "end_lineno": 5,
                    "end_col_offset": 26
                  }
                ],
                "keywords": [],
                "lineno": 5,
                "col_offset": 19,
                "end_lineno": 5,
                "end_col_offset": 27
              },
              "op": {},
              "right": {
                "value": 1,
                "kind": null,
                "lineno": 5,
                "col_offset": 30,
                "end_lineno": 5,
                "end_col_offset": 31
              },
              "lineno": 5,
              "col_offset": 19,
              "end_lineno": 5,
              "end_col_offset": 31
            }
          ]
        ],
        "result_lists": []
      },
      "total_property_accesses": 2
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 9.868199981610815e-06,
        "std_dev": 3.3520490162291836e-06,
        "peak_memory": 0.000377655029296875,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 1.8061799983115635e-05,
        "std_dev": 7.883082871133782e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 3.884480000806434e-05,
        "std_dev": 9.638508846390472e-06,
        "peak_memory": 0.002056121826171875,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 0.00011018960000228618,
        "std_dev": 8.844441404346429e-06,
        "peak_memory": 0.0009918212890625,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 0.0017460955999808903,
        "std_dev": 0.0009694955647324467,
        "peak_memory": 0.0,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {
      "property_name": {
        "access_count": 2,
        "access_types": [
          "PropertyAccessType.METHOD"
        ],
        "nested_properties": []
      }
    },
    "optimization_suggestions": [
      "Consider caching property lookups to avoid repeated access",
      "Properties property_name are accessed frequently. Consider caching them."
    ],
    "example_usage": "From docstring:\n    alternating_colors = create_alternation_rule(\"color\")",
    "error": null,
    "scores": {
      "raw_score": 48.05,
      "normalized_score": 80.08333333333333,
      "complexity_level": "ComplexityScore.EXTREME",
      "contributing_factors": {
        "time_complexity": 60.0,
        "space_complexity": 30.0,
        "cyclomatic_complexity": 60.0,
        "property_access_complexity": 8.6,
        "ast_node_count": 92.6,
        "bottleneck_count": 30.0
      },
      "recommendations": [
        "Consider using caching or memoization to reduce time complexity.",
        "Simplify the rule by breaking it into smaller, more focused rules.",
        "Address identified bottlenecks to improve performance."
      ]
    },
    "size_time_correlation": 0.9999967635607572
  },
  {
    "name": "create_balanced_rule",
    "signature": "(property_name: str, groups: Dict[Any, Set[Any]], tolerance: float = 0.1) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule requiring balanced representation of property value groups.",
    "complexity_analysis": {
      "time_complexity": "O(n\u00b2)",
      "space_complexity": "O(n)",
      "description": "contains 4 loops with 1 nested loops. uses 1 comprehensions. creates temporary collections.",
      "bottlenecks": [
        "Memory usage from temporary collections"
      ],
      "ast_features": {
        "total_loops": 4,
        "nested_loops": 1,
        "max_loop_depth": 2,
        "comprehensions": 1,
        "generator_expressions": 1,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": true,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "{0, 1}",
        "loop_ranges": [],
        "result_lists": []
      },
      "total_property_accesses": 1
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.2214400010179816e-05,
        "std_dev": 9.117166894379664e-07,
        "peak_memory": 0.00115966796875,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 4.1220800005703496e-05,
        "std_dev": 1.5270179936535864e-05,
        "peak_memory": 0.002208709716796875,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 4.304459999957544e-05,
        "std_dev": 3.271376810742472e-06,
        "peak_memory": 0.000827789306640625,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 0.00021609120000221083,
        "std_dev": 0.00014582591748693303,
        "peak_memory": 0.002414703369140625,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 0.0024278096000216465,
        "std_dev": 0.0014059635213468096,
        "peak_memory": 0.0,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {
      "property_name": {
        "access_count": 1,
        "access_types": [
          "PropertyAccessType.READ"
        ],
        "nested_properties": []
      }
    },
    "optimization_suggestions": [
      "High time complexity detected (O(n\u00b2)). Consider using a more efficient algorithm",
      "High complexity bottlenecks identified: Memory usage from temporary collections",
      "Consider caching property lookups to avoid repeated access"
    ],
    "example_usage": "From docstring:\n    # Equal number of red and black cards (\u00b110%)\n    balanced_colors = create_balanced_rule(\"color\", {\n        \"red\": {\"red\"}, \"black\": {\"black\"}\n    })",
    "error": null,
    "scores": {
      "raw_score": 24.25,
      "normalized_score": 40.416666666666664,
      "complexity_level": "ComplexityScore.MODERATE",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 0.0,
        "cyclomatic_complexity": 40.0,
        "property_access_complexity": 0.0,
        "ast_node_count": 80.0,
        "bottleneck_count": 0.0
      },
      "recommendations": [
        "Simplify the rule by breaking it into smaller, more focused rules."
      ]
    },
    "size_time_correlation": 0.9999953974947933
  },
  {
    "name": "create_group_rule",
    "signature": "(group_size: int, condition: Callable[[List[seqrule.core.AbstractObject]], bool]) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule checking a condition over groups of consecutive objects.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(1)",
      "description": "contains 1 loops.",
      "bottlenecks": [],
      "ast_features": {
        "total_loops": 1,
        "nested_loops": 0,
        "max_loop_depth": 1,
        "comprehensions": 0,
        "generator_expressions": 0,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": false,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "{0}",
        "loop_ranges": [
          [
            {
              "value": 0,
              "kind": null,
              "lineno": 5,
              "col_offset": 19,
              "end_lineno": 5,
              "end_col_offset": 20
            },
            {
              "left": {
                "left": {
                  "func": {
                    "id": "len",
                    "ctx": {},
                    "lineno": 5,
                    "col_offset": 22,
                    "end_lineno": 5,
                    "end_col_offset": 25
                  },
                  "args": [
                    {
                      "id": "seq",
                      "ctx": {},
                      "lineno": 5,
                      "col_offset": 26,
                      "end_lineno": 5,
                      "end_col_offset": 29
                    }
                  ],
                  "keywords": [],
                  "lineno": 5,
                  "col_offset": 22,
                  "end_lineno": 5,
                  "end_col_offset": 30
                },
                "op": {},
                "right": {
                  "id": "group_size",
                  "ctx": {},
                  "lineno": 5,
                  "col_offset": 33,
                  "end_lineno": 5,
                  "end_col_offset": 43
                },
                "lineno": 5,
                "col_offset": 22,
                "end_lineno": 5,
                "end_col_offset": 43
              },
              "op": {},
              "right": {
                "value": 1,
                "kind": null,
                "lineno": 5,
                "col_offset": 46,
                "end_lineno": 5,
                "end_col_offset": 47
              },
              "lineno": 5,
              "col_offset": 22,
              "end_lineno": 5,
              "end_col_offset": 47
            }
          ]
        ],
        "result_lists": []
      },
      "total_property_accesses": 0
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.6530799996417045e-05,
        "std_dev": 7.502715342795792e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 1.4490999990357523e-05,
        "std_dev": 3.535121157824935e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 3.446619999749601e-05,
        "std_dev": 1.1429697647029627e-05,
        "peak_memory": 0.0029144287109375,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 0.0002047140000172476,
        "std_dev": 9.798813428308598e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 0.001324322400012079,
        "std_dev": 0.0011437247731597834,
        "peak_memory": 0.013365745544433594,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {},
    "optimization_suggestions": [],
    "example_usage": "From docstring:\n    def ascending(group):\n        return all(group[i][\"value\"] < group[i+1][\"value\"]\n                  for i in range(len(group)-1))\n    ascending_pairs = create_group_rule(2, ascending)",
    "error": null,
    "scores": {
      "raw_score": 22.25,
      "normalized_score": 37.083333333333336,
      "complexity_level": "ComplexityScore.SIMPLE",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 0.0,
        "cyclomatic_complexity": 40.0,
        "property_access_complexity": 0.0,
        "ast_node_count": 60.0,
        "bottleneck_count": 0.0
      },
      "recommendations": []
    },
    "size_time_correlation": 0.999983258308954
  },
  {
    "name": "create_meta_rule",
    "signature": "(rules: List[seqrule.dsl.DSLRule], required_count: int) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule requiring a certain number of other rules to be satisfied.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(1)",
      "description": "contains 1 loops.",
      "bottlenecks": [],
      "ast_features": {
        "total_loops": 1,
        "nested_loops": 0,
        "max_loop_depth": 0,
        "comprehensions": 0,
        "generator_expressions": 1,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": false,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "set()",
        "loop_ranges": [],
        "result_lists": []
      },
      "total_property_accesses": 0
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 4.011060001403166e-05,
        "std_dev": 1.776615863538651e-05,
        "peak_memory": 0.001216888427734375,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 4.691159998628791e-05,
        "std_dev": 1.760715634692642e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 6.87563999917984e-05,
        "std_dev": 2.2934942702371132e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 5.678399999169415e-05,
        "std_dev": 1.9269629099422856e-05,
        "peak_memory": 0.001262664794921875,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 5.331960001058178e-05,
        "std_dev": 2.3921096052521727e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {},
    "optimization_suggestions": [],
    "example_usage": "From docstring:\n    any_two = create_meta_rule([rule1, rule2, rule3], 2)  # Any 2 must pass",
    "error": null,
    "scores": {
      "raw_score": 36.75,
      "normalized_score": 61.25000000000001,
      "complexity_level": "ComplexityScore.COMPLEX",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 30.0,
        "cyclomatic_complexity": 60.0,
        "property_access_complexity": 0.0,
        "ast_node_count": 80.0,
        "bottleneck_count": 30.0
      },
      "recommendations": [
        "Simplify the rule by breaking it into smaller, more focused rules.",
        "Address identified bottlenecks to improve performance."
      ]
    },
    "size_time_correlation": 0.6407541756174128
  },
  {
    "name": "create_running_stat_rule",
    "signature": "(property_name: str, stat_func: Callable[[List[float]], float], min_value: float, max_value: float, window: int) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule checking a running statistic over a sliding window.",
    "complexity_analysis": {},
    "benchmarks": [],
    "test_coverage": 0.0,
    "properties_accessed": {},
    "optimization_suggestions": [],
    "example_usage": "",
    "error": "Failed to analyze rule: Undefined variable in rule: ZeroDivisionError\nTraceback (most recent call last):\n  File \"/home/runner/work/seqrule/seqrule/src/seqrule/analysis/analyzer.py\", line 499, in analyze\n    raise AnalysisError(f\"Undefined variable in rule: {undefined_var}\")\nseqrule.analysis.base.AnalysisError: Undefined variable in rule: ZeroDivisionError\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/seqrule/seqrule/scripts/analyze_rules.py\", line 482, in analyze_rule_generator\n    analysis = analyzer.analyze(example_rule)\n  File \"/home/runner/work/seqrule/seqrule/src/seqrule/analysis/analyzer.py\", line 608, in analyze\n    raise AnalysisError(f\"Failed to analyze rule: {str(e)}\") from e\nseqrule.analysis.base.AnalysisError: Failed to analyze rule: Undefined variable in rule: ZeroDivisionError\n",
    "scores": {
      "raw_score": 30.54,
      "normalized_score": 50.9,
      "complexity_level": "ComplexityScore.MODERATE",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 0.0,
        "cyclomatic_complexity": 60.0,
        "property_access_complexity": 8.6,
        "ast_node_count": 80.0,
        "bottleneck_count": 0.0
      },
      "recommendations": [
        "Simplify the rule by breaking it into smaller, more focused rules."
      ]
    },
    "size_time_correlation": null
  },
  {
    "name": "create_sum_rule",
    "signature": "(property_name: str, target: float, tolerance: float = 0.001) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule requiring property values to sum to a target value.",
    "complexity_analysis": {},
    "benchmarks": [],
    "test_coverage": 0.0,
    "properties_accessed": {},
    "optimization_suggestions": [],
    "example_usage": "",
    "error": "Failed to analyze rule: Undefined variable in rule: e\nTraceback (most recent call last):\n  File \"/home/runner/work/seqrule/seqrule/src/seqrule/analysis/analyzer.py\", line 499, in analyze\n    raise AnalysisError(f\"Undefined variable in rule: {undefined_var}\")\nseqrule.analysis.base.AnalysisError: Undefined variable in rule: e\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/home/runner/work/seqrule/seqrule/scripts/analyze_rules.py\", line 482, in analyze_rule_generator\n    analysis = analyzer.analyze(example_rule)\n  File \"/home/runner/work/seqrule/seqrule/src/seqrule/analysis/analyzer.py\", line 608, in analyze\n    raise AnalysisError(f\"Failed to analyze rule: {str(e)}\") from e\nseqrule.analysis.base.AnalysisError: Failed to analyze rule: Undefined variable in rule: e\n",
    "scores": {
      "raw_score": 19.32,
      "normalized_score": 32.2,
      "complexity_level": "ComplexityScore.SIMPLE",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 0.0,
        "cyclomatic_complexity": 20.0,
        "property_access_complexity": 13.8,
        "ast_node_count": 60.0,
        "bottleneck_count": 0.0
      },
      "recommendations": []
    },
    "size_time_correlation": null
  },
  {
    "name": "create_composite_rule",
    "signature": "(rules: List[seqrule.dsl.DSLRule], mode: str = 'all') -> seqrule.dsl.DSLRule",
    "description": "Creates a rule that combines multiple rules with AND/OR logic.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(n)",
      "description": "contains 1 loops. creates temporary collections.",
      "bottlenecks": [
        "Memory usage from temporary collections"
      ],
      "ast_features": {
        "total_loops": 1,
        "nested_loops": 0,
        "max_loop_depth": 1,
        "comprehensions": 0,
        "generator_expressions": 0,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": true,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "{0}",
        "loop_ranges": [],
        "result_lists": [
          {
            "id": "results",
            "ctx": {},
            "lineno": 2,
            "col_offset": 4,
            "end_lineno": 2,
            "end_col_offset": 11
          }
        ]
      },
      "total_property_accesses": 0
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 3.3606800002417e-05,
        "std_dev": 1.4443755110789262e-05,
        "peak_memory": 0.001102447509765625,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 4.19806000081735e-05,
        "std_dev": 1.1976732404606334e-05,
        "peak_memory": 0.00107574462890625,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 4.294419999268939e-05,
        "std_dev": 1.3714838891179832e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 3.089980001504955e-05,
        "std_dev": 3.7360505355825807e-06,
        "peak_memory": 0.0013523101806640625,
        "gc_collections": 345
      },
      {
        "sequence_size": 1000,
        "avg_time": 3.4321999999065155e-05,
        "std_dev": 1.1770879034949581e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {},
    "optimization_suggestions": [
      "High complexity bottlenecks identified: Memory usage from temporary collections"
    ],
    "example_usage": "From docstring:\n    all_rules = create_composite_rule([rule1, rule2], mode=\"all\")\n    any_rule = create_composite_rule([rule1, rule2], mode=\"any\")",
    "error": null,
    "scores": {
      "raw_score": 46.0,
      "normalized_score": 76.66666666666667,
      "complexity_level": "ComplexityScore.COMPLEX",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 30.0,
        "cyclomatic_complexity": 84.0,
        "property_access_complexity": 8.6,
        "ast_node_count": 99.6,
        "bottleneck_count": 30.0
      },
      "recommendations": [
        "Reduce cyclomatic complexity by breaking down complex conditions.",
        "Simplify the rule by breaking it into smaller, more focused rules.",
        "Address identified bottlenecks to improve performance."
      ]
    },
    "size_time_correlation": -0.10118261089946544
  },
  {
    "name": "create_numerical_range_rule",
    "signature": "(property_name: str, min_value: float, max_value: float) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule requiring numerical property values within a range.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(1)",
      "description": "contains 1 loops.",
      "bottlenecks": [],
      "ast_features": {
        "total_loops": 1,
        "nested_loops": 0,
        "max_loop_depth": 1,
        "comprehensions": 0,
        "generator_expressions": 0,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": false,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "{0}",
        "loop_ranges": [],
        "result_lists": []
      },
      "total_property_accesses": 1
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.5991800000847434e-05,
        "std_dev": 6.722305678320185e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 1.536659998464529e-05,
        "std_dev": 1.6124442109044523e-06,
        "peak_memory": 0.000213623046875,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 3.08194000012918e-05,
        "std_dev": 7.723816761569025e-06,
        "peak_memory": 0.00118255615234375,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 2.8781199978311635e-05,
        "std_dev": 8.34262065876123e-06,
        "peak_memory": 0.000213623046875,
        "gc_collections": 32
      },
      {
        "sequence_size": 1000,
        "avg_time": 2.2788399996898077e-05,
        "std_dev": 4.874516489827658e-06,
        "peak_memory": 0.000377655029296875,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {
      "property_name": {
        "access_count": 1,
        "access_types": [
          "PropertyAccessType.METHOD"
        ],
        "nested_properties": []
      }
    },
    "optimization_suggestions": [
      "Consider caching property lookups to avoid repeated access"
    ],
    "example_usage": "From docstring:\n    valid_temperature = create_numerical_range_rule(\"temperature\", 20, 30)",
    "error": null,
    "scores": {
      "raw_score": 45.550000000000004,
      "normalized_score": 75.91666666666667,
      "complexity_level": "ComplexityScore.COMPLEX",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 30.0,
        "cyclomatic_complexity": 80.0,
        "property_access_complexity": 16.8,
        "ast_node_count": 92.8,
        "bottleneck_count": 30.0
      },
      "recommendations": [
        "Reduce cyclomatic complexity by breaking down complex conditions.",
        "Simplify the rule by breaking it into smaller, more focused rules.",
        "Address identified bottlenecks to improve performance."
      ]
    },
    "size_time_correlation": 0.3154548469489459
  },
  {
    "name": "create_property_match_rule",
    "signature": "(property_name: str, value: Any) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule requiring objects to have a specific property value.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(1)",
      "description": "contains 1 loops.",
      "bottlenecks": [],
      "ast_features": {
        "total_loops": 1,
        "nested_loops": 0,
        "max_loop_depth": 0,
        "comprehensions": 0,
        "generator_expressions": 1,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": false,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "set()",
        "loop_ranges": [],
        "result_lists": []
      },
      "total_property_accesses": 3
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.9229800011544283e-05,
        "std_dev": 7.528558976062255e-06,
        "peak_memory": 0.10164642333984375,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 3.3522199987601195e-05,
        "std_dev": 1.4345617767791035e-05,
        "peak_memory": 0.07159709930419922,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 3.5498199986250255e-05,
        "std_dev": 1.3848529953996746e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 3.2336200013105555e-05,
        "std_dev": 9.25269735589913e-06,
        "peak_memory": 0.0033721923828125,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 3.082559999256773e-05,
        "std_dev": 1.230742623763648e-05,
        "peak_memory": 0.0232696533203125,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {
      "property_name": {
        "access_count": 3,
        "access_types": [
          "PropertyAccessType.CONDITIONAL",
          "PropertyAccessType.COMPARISON",
          "PropertyAccessType.METHOD"
        ],
        "nested_properties": []
      }
    },
    "optimization_suggestions": [
      "Consider caching property lookups to avoid repeated access",
      "Properties property_name are accessed frequently. Consider caching them."
    ],
    "example_usage": "From docstring:\n    color_is_red = create_property_match_rule(\"color\", \"red\")",
    "error": null,
    "scores": {
      "raw_score": 39.33,
      "normalized_score": 65.55,
      "complexity_level": "ComplexityScore.COMPLEX",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 30.0,
        "cyclomatic_complexity": 60.0,
        "property_access_complexity": 12.4,
        "ast_node_count": 87.2,
        "bottleneck_count": 30.0
      },
      "recommendations": [
        "Simplify the rule by breaking it into smaller, more focused rules.",
        "Address identified bottlenecks to improve performance."
      ]
    },
    "size_time_correlation": 0.2942680002336033
  },
  {
    "name": "create_property_trend_rule",
    "signature": "(property_name: str, trend: str = 'increasing') -> seqrule.dsl.DSLRule",
    "description": "Creates a rule requiring property values to follow a trend.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(n)",
      "description": "contains 2 loops. creates temporary collections.",
      "bottlenecks": [
        "Memory usage from temporary collections"
      ],
      "ast_features": {
        "total_loops": 2,
        "nested_loops": 0,
        "max_loop_depth": 1,
        "comprehensions": 0,
        "generator_expressions": 0,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": true,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "{0}",
        "loop_ranges": [
          [
            {
              "left": {
                "func": {
                  "id": "len",
                  "ctx": {},
                  "lineno": 26,
                  "col_offset": 19,
                  "end_lineno": 26,
                  "end_col_offset": 22
                },
                "args": [
                  {
                    "id": "values",
                    "ctx": {},
                    "lineno": 26,
                    "col_offset": 23,
                    "end_lineno": 26,
                    "end_col_offset": 29
                  }
                ],
                "keywords": [],
                "lineno": 26,
                "col_offset": 19,
                "end_lineno": 26,
                "end_col_offset": 30
              },
              "op": {},
              "right": {
                "value": 1,
                "kind": null,
                "lineno": 26,
                "col_offset": 33,
                "end_lineno": 26,
                "end_col_offset": 34
              },
              "lineno": 26,
              "col_offset": 19,
              "end_lineno": 26,
              "end_col_offset": 34
            }
          ]
        ],
        "result_lists": [
          {
            "id": "values",
            "ctx": {},
            "lineno": 6,
            "col_offset": 4,
            "end_lineno": 6,
            "end_col_offset": 10
          }
        ]
      },
      "total_property_accesses": 1
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.445660000172211e-05,
        "std_dev": 7.356875733665425e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 1.944839999623582e-05,
        "std_dev": 4.156392057927686e-06,
        "peak_memory": 0.0008392333984375,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 4.816360000177155e-05,
        "std_dev": 1.040304269601946e-05,
        "peak_memory": 0.000988006591796875,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 0.00021080939999365,
        "std_dev": 4.959715673735291e-05,
        "peak_memory": 0.003719329833984375,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 0.002178906800008917,
        "std_dev": 0.0014053555633897698,
        "peak_memory": 0.0,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {
      "property_name": {
        "access_count": 1,
        "access_types": [
          "PropertyAccessType.READ"
        ],
        "nested_properties": []
      }
    },
    "optimization_suggestions": [
      "High complexity bottlenecks identified: Memory usage from temporary collections",
      "Consider caching property lookups to avoid repeated access"
    ],
    "example_usage": "From docstring:\n    # Values must strictly increase\n    increasing = create_property_trend_rule(\"value\", \"increasing\")\n    # Values must be non-increasing\n    non_increasing = create_property_trend_rule(\"value\", \"non-increasing\")",
    "error": null,
    "scores": {
      "raw_score": 30.6,
      "normalized_score": 51.0,
      "complexity_level": "ComplexityScore.MODERATE",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 0.0,
        "cyclomatic_complexity": 60.0,
        "property_access_complexity": 8.6,
        "ast_node_count": 80.6,
        "bottleneck_count": 0.0
      },
      "recommendations": [
        "Simplify the rule by breaking it into smaller, more focused rules."
      ]
    },
    "size_time_correlation": 0.9999499200450052
  },
  {
    "name": "create_ratio_rule",
    "signature": "(property_name: str, min_ratio: float, max_ratio: float, filter_rule: Optional[Callable[[seqrule.core.AbstractObject], bool]] = None) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule requiring a ratio of objects meeting a condition to be within a range.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(n)",
      "description": "contains 3 loops. creates temporary collections.",
      "bottlenecks": [
        "Memory usage from temporary collections"
      ],
      "ast_features": {
        "total_loops": 3,
        "nested_loops": 0,
        "max_loop_depth": 1,
        "comprehensions": 0,
        "generator_expressions": 2,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": true,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "{0}",
        "loop_ranges": [],
        "result_lists": [
          {
            "id": "valid_objects",
            "ctx": {},
            "lineno": 6,
            "col_offset": 4,
            "end_lineno": 6,
            "end_col_offset": 17
          }
        ]
      },
      "total_property_accesses": 8
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.4274800003022392e-05,
        "std_dev": 6.582007927897464e-06,
        "peak_memory": 0.00019073486328125,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 4.31368000022303e-05,
        "std_dev": 1.2253641472123227e-05,
        "peak_memory": 0.002239227294921875,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 4.808200000070428e-05,
        "std_dev": 1.3510614938864537e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 0.00014267440001276556,
        "std_dev": 1.9772907355456723e-05,
        "peak_memory": 0.03159332275390625,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 0.0012005593999901976,
        "std_dev": 0.00011349207453894968,
        "peak_memory": 0.0114593505859375,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {
      "property_name": {
        "access_count": 8,
        "access_types": [
          "PropertyAccessType.READ",
          "PropertyAccessType.CONDITIONAL",
          "PropertyAccessType.COMPARISON"
        ],
        "nested_properties": []
      }
    },
    "optimization_suggestions": [
      "High complexity bottlenecks identified: Memory usage from temporary collections",
      "Consider caching property lookups to avoid repeated access",
      "Properties property_name are accessed frequently. Consider caching them."
    ],
    "example_usage": "From docstring:\n    # At least 40% but no more than 60% GC content\n    gc_content = create_ratio_rule(\"base\", 0.4, 0.6, lambda obj: obj[\"base\"] in [\"G\", \"C\"])",
    "error": null,
    "scores": {
      "raw_score": 39.4,
      "normalized_score": 65.66666666666666,
      "complexity_level": "ComplexityScore.COMPLEX",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 30.0,
        "cyclomatic_complexity": 60.0,
        "property_access_complexity": 8.6,
        "ast_node_count": 93.6,
        "bottleneck_count": 30.0
      },
      "recommendations": [
        "Simplify the rule by breaking it into smaller, more focused rules.",
        "Address identified bottlenecks to improve performance."
      ]
    },
    "size_time_correlation": 0.999938928483477
  },
  {
    "name": "create_pattern_rule",
    "signature": "(pattern: List[Any], property_name: str) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule requiring property values to match a specific pattern.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(n)",
      "description": "contains 4 loops. uses 2 comprehensions. creates temporary collections.",
      "bottlenecks": [
        "Memory usage from temporary collections"
      ],
      "ast_features": {
        "total_loops": 4,
        "nested_loops": 0,
        "max_loop_depth": 0,
        "comprehensions": 2,
        "generator_expressions": 2,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": true,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "set()",
        "loop_ranges": [],
        "result_lists": []
      },
      "total_property_accesses": 4
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.1379199997918477e-05,
        "std_dev": 7.66329533659148e-06,
        "peak_memory": 0.00045013427734375,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 4.7296400009599895e-05,
        "std_dev": 1.4892217246107597e-05,
        "peak_memory": 0.0006866455078125,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 4.1102400007275716e-05,
        "std_dev": 2.984368661474824e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 9.464439999646856e-05,
        "std_dev": 2.492440219720737e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 0.0004382773999964229,
        "std_dev": 3.684960613030227e-05,
        "peak_memory": 0.047924041748046875,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {
      "property_name": {
        "access_count": 4,
        "access_types": [
          "PropertyAccessType.CONDITIONAL",
          "PropertyAccessType.METHOD"
        ],
        "nested_properties": []
      }
    },
    "optimization_suggestions": [
      "High complexity bottlenecks identified: Memory usage from temporary collections",
      "Consider caching property lookups to avoid repeated access",
      "Properties property_name are accessed frequently. Consider caching them."
    ],
    "example_usage": "From docstring:\n    color_pattern = create_pattern_rule([\"red\", \"black\", \"red\"], \"color\")",
    "error": null,
    "scores": {
      "raw_score": 51.26,
      "normalized_score": 85.43333333333332,
      "complexity_level": "ComplexityScore.EXTREME",
      "contributing_factors": {
        "time_complexity": 60.0,
        "space_complexity": 30.0,
        "cyclomatic_complexity": 80.0,
        "property_access_complexity": 0.0,
        "ast_node_count": 87.6,
        "bottleneck_count": 30.0
      },
      "recommendations": [
        "Consider using caching or memoization to reduce time complexity.",
        "Reduce cyclomatic complexity by breaking down complex conditions.",
        "Simplify the rule by breaking it into smaller, more focused rules.",
        "Address identified bottlenecks to improve performance."
      ]
    },
    "size_time_correlation": 0.9922770550275579
  },
  {
    "name": "create_transition_rule",
    "signature": "(property_name: str, valid_transitions: Dict[Any, Set[Any]]) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule enforcing valid transitions between property values.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(1)",
      "description": "contains 1 loops.",
      "bottlenecks": [],
      "ast_features": {
        "total_loops": 1,
        "nested_loops": 0,
        "max_loop_depth": 1,
        "comprehensions": 0,
        "generator_expressions": 0,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": false,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "{0}",
        "loop_ranges": [],
        "result_lists": []
      },
      "total_property_accesses": 1
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.6760999994858138e-05,
        "std_dev": 4.487968943282164e-06,
        "peak_memory": 0.07845687866210938,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 1.4158399994812499e-05,
        "std_dev": 1.820764780095943e-06,
        "peak_memory": 0.002254486083984375,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 2.4143000007370575e-05,
        "std_dev": 5.968224881497425e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 8.126960000254257e-05,
        "std_dev": 1.6242250419249052e-05,
        "peak_memory": 0.014271736145019531,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 0.0005095945999869401,
        "std_dev": 2.4780640117166484e-05,
        "peak_memory": 0.019992828369140625,
        "gc_collections": 4
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {
      "property_name": {
        "access_count": 1,
        "access_types": [
          "PropertyAccessType.READ"
        ],
        "nested_properties": []
      }
    },
    "optimization_suggestions": [
      "Consider caching property lookups to avoid repeated access"
    ],
    "example_usage": "From docstring:\n    # Valid note transitions in a scale\n    scale_rule = create_transition_rule(\"pitch\", {\n        \"C\": {\"D\"}, \"D\": {\"E\"}, \"E\": {\"F\"}, \"F\": {\"G\"},\n        \"G\": {\"A\"}, \"A\": {\"B\"}, \"B\": {\"C\"}\n    })",
    "error": null,
    "scores": {
      "raw_score": 30.6,
      "normalized_score": 51.0,
      "complexity_level": "ComplexityScore.MODERATE",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 0.0,
        "cyclomatic_complexity": 60.0,
        "property_access_complexity": 8.6,
        "ast_node_count": 80.6,
        "bottleneck_count": 0.0
      },
      "recommendations": [
        "Simplify the rule by breaking it into smaller, more focused rules."
      ]
    },
    "size_time_correlation": 0.9999631519963408
  },
  {
    "name": "create_unique_property_rule",
    "signature": "(property_name: str, scope: str = 'global') -> seqrule.dsl.DSLRule",
    "description": "Creates a rule requiring property values to be unique within a scope.",
    "complexity_analysis": {
      "time_complexity": "O(n)",
      "space_complexity": "O(n)",
      "description": "contains 2 loops. creates temporary collections.",
      "bottlenecks": [
        "Memory usage from temporary collections"
      ],
      "ast_features": {
        "total_loops": 2,
        "nested_loops": 0,
        "max_loop_depth": 1,
        "comprehensions": 0,
        "generator_expressions": 0,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": true,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "{0}",
        "loop_ranges": [
          [
            {
              "left": {
                "func": {
                  "id": "len",
                  "ctx": {},
                  "lineno": 13,
                  "col_offset": 23,
                  "end_lineno": 13,
                  "end_col_offset": 26
                },
                "args": [
                  {
                    "id": "seq",
                    "ctx": {},
                    "lineno": 13,
                    "col_offset": 27,
                    "end_lineno": 13,
                    "end_col_offset": 30
                  }
                ],
                "keywords": [],
                "lineno": 13,
                "col_offset": 23,
                "end_lineno": 13,
                "end_col_offset": 31
              },
              "op": {},
              "right": {
                "value": 1,
                "kind": null,
                "lineno": 13,
                "col_offset": 34,
                "end_lineno": 13,
                "end_col_offset": 35
              },
              "lineno": 13,
              "col_offset": 23,
              "end_lineno": 13,
              "end_col_offset": 35
            }
          ]
        ],
        "result_lists": [
          {
            "id": "values",
            "ctx": {},
            "lineno": 6,
            "col_offset": 8,
            "end_lineno": 6,
            "end_col_offset": 14
          }
        ]
      },
      "total_property_accesses": 1
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.5072199994392577e-05,
        "std_dev": 3.636283095594307e-06,
        "peak_memory": 0.0006103515625,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 2.423939998834612e-05,
        "std_dev": 8.260732523548813e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 3.779019999683442e-05,
        "std_dev": 1.2029491383509457e-05,
        "peak_memory": 0.002044677734375,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 0.0001318538000191438,
        "std_dev": 1.7574893020936633e-05,
        "peak_memory": 0.026409149169921875,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 0.0006761191999999028,
        "std_dev": 7.533555559835711e-05,
        "peak_memory": 0.048007965087890625,
        "gc_collections": 8
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {
      "property_name": {
        "access_count": 1,
        "access_types": [
          "PropertyAccessType.READ"
        ],
        "nested_properties": []
      }
    },
    "optimization_suggestions": [
      "High complexity bottlenecks identified: Memory usage from temporary collections",
      "Consider caching property lookups to avoid repeated access"
    ],
    "example_usage": "From docstring:\n    # No duplicate IDs globally\n    unique_ids = create_unique_property_rule(\"id\", scope=\"global\")\n    # No adjacent duplicate values\n    no_adjacent = create_unique_property_rule(\"value\", scope=\"adjacent\")",
    "error": null,
    "scores": {
      "raw_score": 39.4,
      "normalized_score": 65.66666666666666,
      "complexity_level": "ComplexityScore.COMPLEX",
      "contributing_factors": {
        "time_complexity": 25.0,
        "space_complexity": 30.0,
        "cyclomatic_complexity": 60.0,
        "property_access_complexity": 8.6,
        "ast_node_count": 93.6,
        "bottleneck_count": 30.0
      },
      "recommendations": [
        "Simplify the rule by breaking it into smaller, more focused rules.",
        "Address identified bottlenecks to improve performance."
      ]
    },
    "size_time_correlation": 0.998806641933888
  },
  {
    "name": "create_property_cycle_rule",
    "signature": "(*properties: str) -> seqrule.dsl.DSLRule",
    "description": "Creates a rule requiring objects to cycle through property values.",
    "complexity_analysis": {
      "time_complexity": "O(n\u00b2)",
      "space_complexity": "O(n)",
      "description": "contains 4 loops with 2 nested loops. uses 1 comprehensions. creates temporary collections.",
      "bottlenecks": [
        "Memory usage from temporary collections"
      ],
      "ast_features": {
        "total_loops": 4,
        "nested_loops": 2,
        "max_loop_depth": 3,
        "comprehensions": 1,
        "generator_expressions": 0,
        "sorting_operation": false,
        "binary_search": false,
        "builds_result_list": true,
        "has_exponential": false,
        "has_factorial": false,
        "loop_depths": "{0, 1, 2}",
        "loop_ranges": [],
        "result_lists": [
          {
            "id": "seen_values",
            "ctx": {},
            "lineno": 12,
            "col_offset": 12,
            "end_lineno": 12,
            "end_col_offset": 23
          }
        ]
      },
      "total_property_accesses": 0
    },
    "benchmarks": [
      {
        "sequence_size": 0,
        "avg_time": 1.518860000260247e-05,
        "std_dev": 4.403968450171581e-06,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 1,
        "avg_time": 3.0040200010716943e-05,
        "std_dev": 8.181440568380344e-07,
        "peak_memory": 0.000843048095703125,
        "gc_collections": 0
      },
      {
        "sequence_size": 10,
        "avg_time": 5.846699998528493e-05,
        "std_dev": 1.0614329949384311e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 100,
        "avg_time": 0.00032803000002559204,
        "std_dev": 6.255676794893364e-05,
        "peak_memory": 0.0,
        "gc_collections": 0
      },
      {
        "sequence_size": 1000,
        "avg_time": 0.28201616100001276,
        "std_dev": 0.3844377779154713,
        "peak_memory": 0.01726531982421875,
        "gc_collections": 0
      }
    ],
    "test_coverage": 1.0,
    "properties_accessed": {},
    "optimization_suggestions": [
      "High time complexity detected (O(n\u00b2)). Consider using a more efficient algorithm",
      "High complexity bottlenecks identified: Memory usage from temporary collections"
    ],
    "example_usage": "From docstring:\n    color_cycle = create_property_cycle_rule(\"color\")  # Values must cycle",
    "error": null,
    "scores": {
      "raw_score": 51.26,
      "normalized_score": 85.43333333333332,
      "complexity_level": "ComplexityScore.EXTREME",
      "contributing_factors": {
        "time_complexity": 60.0,
        "space_complexity": 30.0,
        "cyclomatic_complexity": 80.0,
        "property_access_complexity": 0.0,
        "ast_node_count": 87.6,
        "bottleneck_count": 30.0
      },
      "recommendations": [
        "Consider using caching or memoization to reduce time complexity.",
        "Reduce cyclomatic complexity by breaking down complex conditions.",
        "Simplify the rule by breaking it into smaller, more focused rules.",
        "Address identified bottlenecks to improve performance."
      ]
    },
    "size_time_correlation": 0.9954363341881565
  }
]