# Generated from SequenceRule.g4 by ANTLR 4.13.2
import sys

from antlr4 import DFA, ATNDeserializer, Lexer, LexerATNSimulator, PredictionContextCache

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,140,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,4,0,51,8,0,11,0,12,
        0,52,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,5,9,84,8,
        9,10,9,12,9,87,9,9,1,9,1,9,1,10,1,10,5,10,93,8,10,10,10,12,10,96,
        9,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,
        1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,3,19,126,8,19,1,20,4,20,129,8,20,11,20,12,20,130,1,20,1,
        20,1,21,1,21,1,22,1,22,1,23,1,23,0,0,24,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,0,45,0,47,0,1,0,6,1,0,48,57,3,0,10,10,13,
        13,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,
        9,10,13,13,32,32,2,0,65,90,97,122,141,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,50,1,0,
        0,0,3,54,1,0,0,0,5,56,1,0,0,0,7,59,1,0,0,0,9,64,1,0,0,0,11,69,1,
        0,0,0,13,73,1,0,0,0,15,76,1,0,0,0,17,78,1,0,0,0,19,81,1,0,0,0,21,
        90,1,0,0,0,23,97,1,0,0,0,25,99,1,0,0,0,27,101,1,0,0,0,29,103,1,0,
        0,0,31,106,1,0,0,0,33,108,1,0,0,0,35,110,1,0,0,0,37,113,1,0,0,0,
        39,125,1,0,0,0,41,128,1,0,0,0,43,134,1,0,0,0,45,136,1,0,0,0,47,138,
        1,0,0,0,49,51,7,0,0,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,
        52,53,1,0,0,0,53,2,1,0,0,0,54,55,5,44,0,0,55,4,1,0,0,0,56,57,5,105,
        0,0,57,58,5,102,0,0,58,6,1,0,0,0,59,60,5,116,0,0,60,61,5,104,0,0,
        61,62,5,101,0,0,62,63,5,110,0,0,63,8,1,0,0,0,64,65,5,101,0,0,65,
        66,5,108,0,0,66,67,5,115,0,0,67,68,5,101,0,0,68,10,1,0,0,0,69,70,
        5,97,0,0,70,71,5,110,0,0,71,72,5,100,0,0,72,12,1,0,0,0,73,74,5,111,
        0,0,74,75,5,114,0,0,75,14,1,0,0,0,76,77,5,64,0,0,77,16,1,0,0,0,78,
        79,5,45,0,0,79,80,5,62,0,0,80,18,1,0,0,0,81,85,5,34,0,0,82,84,8,
        1,0,0,83,82,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,
        88,1,0,0,0,87,85,1,0,0,0,88,89,5,34,0,0,89,20,1,0,0,0,90,94,7,2,
        0,0,91,93,7,3,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,
        1,0,0,0,95,22,1,0,0,0,96,94,1,0,0,0,97,98,5,40,0,0,98,24,1,0,0,0,
        99,100,5,41,0,0,100,26,1,0,0,0,101,102,5,61,0,0,102,28,1,0,0,0,103,
        104,5,33,0,0,104,105,5,61,0,0,105,30,1,0,0,0,106,107,5,60,0,0,107,
        32,1,0,0,0,108,109,5,62,0,0,109,34,1,0,0,0,110,111,5,60,0,0,111,
        112,5,61,0,0,112,36,1,0,0,0,113,114,5,62,0,0,114,115,5,61,0,0,115,
        38,1,0,0,0,116,117,5,116,0,0,117,118,5,114,0,0,118,119,5,117,0,0,
        119,126,5,101,0,0,120,121,5,102,0,0,121,122,5,97,0,0,122,123,5,108,
        0,0,123,124,5,115,0,0,124,126,5,101,0,0,125,116,1,0,0,0,125,120,
        1,0,0,0,126,40,1,0,0,0,127,129,7,4,0,0,128,127,1,0,0,0,129,130,1,
        0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,133,6,
        20,0,0,133,42,1,0,0,0,134,135,7,0,0,0,135,44,1,0,0,0,136,137,7,5,
        0,0,137,46,1,0,0,0,138,139,5,34,0,0,139,48,1,0,0,0,6,0,52,85,94,
        125,130,1,6,0,0
    ]

class SequenceRuleLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER = 1
    COMMA = 2
    IF = 3
    THEN = 4
    ELSE = 5
    AND = 6
    OR = 7
    AT = 8
    ARROW = 9
    STRING = 10
    IDENTIFIER = 11
    LPAREN = 12
    RPAREN = 13
    EQ = 14
    NEQ = 15
    LT = 16
    GT = 17
    LTE = 18
    GTE = 19
    BOOLEAN = 20
    WS = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','", "'if'", "'then'", "'else'", "'and'", "'or'", "'@'", "'->'", 
            "'('", "')'", "'='", "'!='", "'<'", "'>'", "'<='", "'>='" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "COMMA", "IF", "THEN", "ELSE", "AND", "OR", "AT", 
            "ARROW", "STRING", "IDENTIFIER", "LPAREN", "RPAREN", "EQ", "NEQ", 
            "LT", "GT", "LTE", "GTE", "BOOLEAN", "WS" ]

    ruleNames = [ "NUMBER", "COMMA", "IF", "THEN", "ELSE", "AND", "OR", 
                  "AT", "ARROW", "STRING", "IDENTIFIER", "LPAREN", "RPAREN", 
                  "EQ", "NEQ", "LT", "GT", "LTE", "GTE", "BOOLEAN", "WS", 
                  "DIGIT", "LETTER", "QUOTE" ]

    grammarFileName = "SequenceRule.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


